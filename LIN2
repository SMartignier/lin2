# Module LIN2

## Installation d'un serveur mutualisé

##### Olivet Lola & Martignier Stéphane

1. Installation de Debian 8
2. Service SSH
3. Serveur Web Nginx
4. PHP-FPM
5. MariaDB


##1 Installation de Debian

Nous partons d'une machine Debian 8.2 installée de manière habituelle.


##2 Service SSH

####Installation du service

En tant que root entrer la commande:

```
apt-get install ssh

```

####Configuration du service

L'utilisateur "root" ne peut pas, par défaut, se connecter via SSH. Il ne peut se connecter que directement sur la machine physique. Cependant, si pour une raison inconnue, votre compte root peut se connecter via SSH, ouvrez le fichier `/etc/ssh/sshd_config`, trouvez la ligne suivante:

```
 #PermitRootLogin no

```

si elle n'existe pas, l'ajouter et enlever le "#" afin d'obtenir:

```
 PermitRootLogin no

```

Nous pourrions mettre en place une authentification via clés privées/publiques uniquement et désactiver la connexion via mot de passe, afin de se protéger contre le brut force. Mais cela forcerait une intervention humaine pour générer ces clés à chaque nouvel utilisateur, or cela n'est pas le but, comme discuté avec M.Hurni.

Toutefois, afin d'augmenter un peu le niveau de sécurité, nous rajoutons les utilisateurs autorisés à se connecter via ssh dans le fichier en utilisant les groupes. Cela demande toujours une intervention humaine, mais celle-ci est simplifiée.
Toujours dans le fichier:

```
/etc/ssh/sshd_config

```

Ajouter la ligne:

```
AllowGroups users-ssh

```

Il faut donc aussi créer le groupe users-ssh via la commande:

```
addgroup users-ssh

```

Plus tard nous mettrons les utilisateurs autorisés à se connecter via SSH dans ce groupe. Si vous voulez dès à présent créer un utilisateur autorisé à se connecter via SSH, créez l'utilisateur à l'aide de la commande suivante:

```
adduser <nom_utilisateur> users-ssh

```

Suivez les instructions à l'écran puis ajouter cet utilisateur au groupe users-ssh.

```
adduser <nom_utilisateur> users-ssh

```

 Il vous faut alors redémarrer le service à l'aide de la commande:

```
 /etc/init.d/ssh restart

```


##3 Serveur Web Nginx

####Installation du serveur

Il faut vous rendre sur le site officiel de Nginx, nginx.org, et y suivre la marche à suivre pour l'installation sur Debian "Jessie". Il est possible d'éviter les alertes à l'installation de Nginx, en téléchargeant la clé utilisée pour signer le paquet nginx et l'ajouter à la commande apt-get. Cette étape n'est donc pas obligatoire.

```
apt-key add <fichier telecharger>

```

Pour installer le serveur lui-même, il faut ajouter le dépot Nginx aux dépots existants sur la machine. Pour cela, ouvrir le fichier:

```
/etc/apt/sources.list

```

on ajoute le dépot avec les lignes:

```
deb http://nginx.org/packages/debian/ jessie nginx
deb-src http://nginx.org/packages/debian/ jessie nginx

```

Ensuite on installe nginx avec les commandes:

```
apt-get update
apt-get install nginx

```

####Configuration du serveur

Les fichiers de configuration du serveur se trouvent dans `/etc/nginx/` et le site dans `/usr/share/nginx/`. Ouvrez le fichier `/etc/nginx/conf.d/default.conf` et trouvez la partie:

```
location / {
	root /usr/share/nginx/html
	index index.html index.htm;
}

```

Modifiez-la comme ceci:

```
root /usr/share/nginx/html
location / {				
	index index.html index.htm index.php;
}

```

Ensuite, trouvez la partie:

```
#location ~ \.php$ {
#	root html;
#       fastcgi_pass localhost:9000;
#       fastcgi_index index.php;
#	fastcgi_param ...
#	include fastcgi_params               
#}

```

Appliquez les modifications suivantes:

```
location ~ \.php$ {
	#root html;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
	include fastcgi_params
	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;              
}

```

Il faudra, par la suite, rajouter/modifier des fichiers pour chaque nouvel utilisateur.

Rajoutez l'utilisateur nginx au group www-data afin qu'il ait les droits sur le fichier socket.

```
adduser nginx www-data

```


##4 PHP-FPM

####Installation

Pour l’installation de PHP-FPM, entrez la commande suivante:

```
apt-get install php5-fpm php5-mysql

```

####Configuration

Ouvrez le fichier `/etc/php5/fpm/php.ini` et trouvez la ligne:
 
```
allow_url_fopen = On

```

Remplacez-la par:

```
allow_url_fopen = Off

```
Puis la ligne:

```
cgi.fix_pathinfo=1

```

Changez-la comme ceci:

```
cgi.fix_pathinfo=0

```

##5 MariaDB

####Installation

Pour l'installation de MariaDB, il faut rentrer les commandes ci-dessous. Si vous n'avez pas la même version de Debian, il faut vous rendre sur le site: https://downloads.mariadb.org/mariadb/repositories/#mirror=cube et sélectionner la version qui correspond.

```
apt-get install software-properties-common
apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
add-apt-repository 'deb arch=amd64 http://mariadb.cu.be/repo/10.1/debian jessie main'
apt-get update

```

Atttention, si à ce moment-là vous avez une erreur dans la commande `apt-get update` par rapport au pilote https manquant, exécutez la ligne de code suivante:

```
apt-get install apt-transport-https
apt-get update

```

On peut maintenant installer MariaDB.

```
apt-get install mariadb-server

```

####Configuration

Loguez-vous sur le serveur à l'aide de l'utilisateur root.

```
mysql -u root -p

```

Créez l'utilisateur qui sera utilisé pour l'accès à distance, donnez-lui les droits et appliquez les changements.

```
create user '<nom_utilisateur>' identified by '<mot_de_passe>';
GRANT alter, delete, execute, insert, references, select, update, create ON TABLE <nom_database>.* TO ‘<nom_utilisateur>’%’ WITH GRANT OPTION ;
flush privileges;

```
Quittez MariaDB puis ouvrez le fichier `/etc/mysql/my.cnf` et commentez la ligne:

```
bind-address = 127.0.0.1

```

Cette ligne empêche la connexion à distance. Maintenant, redémarrez MariaDB.

```
/etc/init.d/mysql restart

```

Vous pouvez maintenant utiliser un accès à distance, par exemple workbench, pour administrer MariaDB.



##6 Ajout d'un utilisateur

####Création de l'utilisateur

```
adduser <nom_utilisateur>

```

####Création de son répertoire pour le site

```
mkdir /home/<nom_d'utilisateur>/www

```

Nous décidons de donner le nom de www au répertoire qui contiendra les sites des utilisateurs. Vous pouvez bien sûr changer ce nom ou l'emplacement où vous stockerez les sites, mais il faudra alors appliquer ces changements partout dans la suite de la manipulation.
On donne ensuite les droits d'accès uniquement au propriétaire du site.

```
chown <nom_utilisateur>:<nom_utilisateur> /home/<nom_utilisateur>/www
chmod 770 /home/<nom_utilisateur>/www

```

On y copie les fichiers de base et on y applique les droits suivants:

```
cp /usr/share/nginx/html/* /home/<nom_utilisateur>/www
chown <nom_utilisateur>:<nom_utilisateur> /home/<nom_utilisateur>/www/*
chmod 760 /home/<nom_utilisateur>/www/*

```

On rajoute l'utilisateur dans le groupe autorisé à se connecter en SSH.

```
adduser <nom_utilsateur> users-ssh

```

Pour finir, on ajoute l'utilisateur nginx au groupe <nom_utilisateur> afin qu'il ait accès au contenu du site.

```
adduser nginx <nom_d'utilsateur>

```

####Configuration nginx, php-fpm

Créez une copie du fichier `/etc/nginx/conf.d/default.conf` sous `<nom_utilisateur>.conf`.

```
cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/<nom_site>.conf

```

Ouvrez le fichier copié et trouvez les lignes:

```
server_name localhost

[...]

root /usr/share/nginx/html;

[...]

location = /50x.html {
	root /usr/share/nginx/html;
}

[...]

fastcgi_pass unix:/var/run/php5-fpm.sock;

```

Et modifiez-les en:

```
server_name <nom_du_site>

[...]

root /home/<nom_d'utilisateur>/www;

[...]

location = /50x.html {
	root /home/<nom_d'utilisateur>/www;
}

[...]

fastcgi_pass unix:/var/run/<nom_site>.sock;

[...]

```

Pour PHP-fpm, nous commençons par créer une copie du fichier `/etc/php5/fpm/` sous <nom_site>.conf:

```
chown <nom_d'utilisateur>:<nom_utilisateur> /etc/php5/fpm/pool.d/<nom_utilisateur>.conf
chmod 760 /etc/php5/fpm/pool.d/<nom_utilisateur>.conf

```

Puis, à l'intérieur de ce fichier, trouvez les lignes:

```
[www]

[...]

user = www-data
group = www-data

[...]

listen = /var/run/php5-fpm.sock

[...]

listen.owner = www-data
listen.group = www-data

```
Changez-les comme suit:

```
[<nom_site>]

[...]

user = <nom_utilisateur>
group = <nom_utilisateur>

[...]

listen = /var/run/<nom_site>.sock

[...]

listen.owner = <nom_utilisateur>
listen.group = <nom_utilisateur>

```

####Configuration MariaDB

On se connecte sur mysql, puis on crée l'utilisateur.

```
create user '<nom_utilisateur>' identified by '<mot_de_passe>';

```

on crée une base de données pour l'utilisateur.

```
create DATABASE <nom_BDD>;

```

On donne les droits sur la base de données et pour l'accès à distance:

```
grant all privileges on <nom_BDD>.* to '<nom_utilisateur>'@'%' with grant option;
flush privileges;

```

Tout est maintenant prêt pour une utilisation par les utilisateurs.